#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

// C√†i ƒë·∫∑t WiFi v√† MQTT
const char* ssid = "LCH";
const char* password = "11223344";
const char* mqtt_server = "demo.thingsboard.io";
const int mqtt_port = 1883;
const char* accessToken = "VbAuoKsMiCdK2aDU6GD4";

WiFiClient espClient;
PubSubClient client(espClient);

// Ch√¢n LED cho ƒë√®n giao th√¥ng
const int redPin = 26;
const int yellowPin = 25;
const int greenPin = 33;

// Th·ªùi gian tr·ªÖ (ms)
int redDelay = 5000;
int greenDelay = 5000;
int yellowDelay = 3000;
bool autoMode = true; // true = T·ª± ƒë·ªông, false = Th·ªß c√¥ng
String currentColor = ""; // Theo d√µi m√†u hi·ªán t·∫°i
unsigned long lastChangeTime = 0; // Th·ªùi gian thay ƒë·ªïi m√†u cu·ªëi c√πng
String autoState = "RED"; // Tr·∫°ng th√°i hi·ªán t·∫°i trong ch·∫ø ƒë·ªô t·ª± ƒë·ªông

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("K·∫øt n·ªëi v·ªõi ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("ƒê√£ k·∫øt n·ªëi WiFi");
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("K·∫øt n·ªëi v·ªõi ThingsBoard...");
    if (client.connect("ESP32TrafficLight", accessToken, NULL)) {
      Serial.println("ƒë√£ k·∫øt n·ªëi");
      client.subscribe("v1/devices/me/rpc/request/+"); // ƒêƒÉng k√Ω nh·∫≠n l·ªánh RPC
    } else {
      Serial.print("th·∫•t b·∫°i, rc=");
      Serial.print(client.state());
      Serial.println(" th·ª≠ l·∫°i sau 5 gi√¢y");
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  String msg;
  for (unsigned int i = 0; i < length; i++) {
    msg += (char)payload[i];
  }
  Serial.print("Nh·∫≠n ƒë∆∞·ª£c RPC: ");
  Serial.println(msg);

  StaticJsonDocument<200> doc;
  DeserializationError error = deserializeJson(doc, msg);

  if (error) {
    Serial.print("deserializeJson() th·∫•t b·∫°i: ");
    Serial.println(error.c_str());
    return;
  }

  // X·ª≠ l√Ω ph∆∞∆°ng th·ª©c RPC
  const char* method = doc["method"];
  if (method && String(method) == "setLight") {
    autoMode = false; // Chuy·ªÉn sang ch·∫ø ƒë·ªô th·ªß c√¥ng
    String color = doc["params"].as<String>();
    if (color == "RED" || color == "GREEN" || color == "YELLOW") {
      setLight(color);
      currentColor = color; // L∆∞u m√†u hi·ªán t·∫°i
      lastChangeTime = millis(); // C·∫≠p nh·∫≠t th·ªùi gian thay ƒë·ªïi
    }
  } else if (method && String(method) == "resumeAuto") {
    autoMode = true;
    currentColor = "";
    autoState = "RED"; // B·∫Øt ƒë·∫ßu l·∫°i t·ª´ ƒê·ªé
    lastChangeTime = millis(); // ƒê·∫∑t l·∫°i th·ªùi gian
    setLight(autoState); // B·∫≠t ƒë√®n ƒë·∫ßu ti√™n trong ch·∫ø ƒë·ªô t·ª± ƒë·ªông
    Serial.println("Chuy·ªÉn sang ch·∫ø ƒë·ªô T·ª∞ ƒê·ªòNG");
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(redPin, OUTPUT);
  pinMode(yellowPin, OUTPUT);
  pinMode(greenPin, OUTPUT);

  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  // Kh·ªüi ƒë·ªông v·ªõi ƒë√®n ƒê·ªé
  setLight("RED");
  autoState = "RED";
  lastChangeTime = millis();
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // X·ª≠ l√Ω ch·∫ø ƒë·ªô t·ª± ƒë·ªông m√† kh√¥ng d√πng delay
  if (autoMode) {
    unsigned long currentTime = millis();
    if (autoState == "RED" && currentTime - lastChangeTime >= redDelay) {
      autoState = "GREEN";
      setLight(autoState);
      lastChangeTime = currentTime;
    } else if (autoState == "GREEN" && currentTime - lastChangeTime >= greenDelay) {
      autoState = "YELLOW";
      setLight(autoState);
      lastChangeTime = currentTime;
    } else if (autoState == "YELLOW" && currentTime - lastChangeTime >= yellowDelay) {
      autoState = "RED";
      setLight(autoState);
      lastChangeTime = currentTime;
    }
  }
  // Ch·∫ø ƒë·ªô th·ªß c√¥ng: kh√¥ng l√†m g√¨, gi·ªØ tr·∫°ng th√°i ƒë√®n hi·ªán t·∫°i
}

void setLight(String color) {
  if (color == "RED") {
    digitalWrite(redPin, HIGH);
    digitalWrite(yellowPin, LOW);
    digitalWrite(greenPin, LOW);
  } else if (color == "GREEN") {
    digitalWrite(redPin, LOW);
    digitalWrite(yellowPin, LOW);
    digitalWrite(greenPin, HIGH);
  } else if (color == "YELLOW") {
    digitalWrite(redPin, LOW);
    digitalWrite(yellowPin, HIGH);
    digitalWrite(greenPin, LOW);
  }

  sendStatus(color);
}

void sendStatus(String color) {
  String payload = "{";
  if (color == "RED") payload += "\"traffic_light\":\"RED üî¥\"";
  else if (color == "GREEN") payload += "\"traffic_light\":\"GREEN üü¢\"";
  else if (color == "YELLOW") payload += "\"traffic_light\":\"YELLOW üü°\"";
  payload += "}";

  Serial.print("G·ª≠i payload: ");
  Serial.println(payload);

  if (client.publish("v1/devices/me/telemetry", (char*)payload.c_str())) {
    Serial.println("G·ª≠i th√†nh c√¥ng");
  } else {
    Serial.println("G·ª≠i th·∫•t b·∫°i");
  }
}
