from ultralytics import YOLO
import cv2
import numpy as np

import util
from sort.sort import *
from util import get_car, read_license_plate, write_csv

results = {}
mot_tracker = Sort()

# ================== KHỞI TẠO MODEL ==================
coco_model = YOLO('yolov8x.pt')                         # model nhận diện phương tiện
license_plate_detector = YOLO('./models/license_plate.pt')  # model nhận diện biển số

# ================== VIDEO INPUT / OUTPUT ==================
cap = cv2.VideoCapture('./1007.mp4')

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
fps = cap.get(cv2.CAP_PROP_FPS)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
out = cv2.VideoWriter('./output_violation.mp4', fourcc, fps, (width, height))

vehicles = [2, 3]  # car, motorbike (theo COCO)

# ================== VÙNG DỪNG XE ==================
# Điều chỉnh theo video của bạn (1920x1080 gợi ý)
violation_zone = [300, 1450, 2250, 1820]  # [x1, y1, x2, y2]
x1_zone, y1_zone, x2_zone, y2_zone = violation_zone

# ================== HÀM TÍNH IOU ==================
def compute_iou(box, zone):
    bx1, by1, bx2, by2 = box
    zx1, zy1, zx2, zy2 = zone

    inter_x1 = max(bx1, zx1)
    inter_y1 = max(by1, zy1)
    inter_x2 = min(bx2, zx2)
    inter_y2 = min(by2, zy2)

    inter_area = max(0, inter_x2 - inter_x1) * max(0, inter_y2 - inter_y1)
    box_area = (bx2 - bx1) * (by2 - by1)
    zone_area = (zx2 - zx1) * (zy2 - zy1)
    iou = inter_area / float(box_area + zone_area - inter_area + 1e-6)
    return iou

# ================== XỬ LÝ VIDEO ==================
frame_nmr = -1
ret = True
while ret and frame_nmr < 5000: 
    frame_nmr += 1
    ret, frame = cap.read()
    if not ret:
        break

    results[frame_nmr] = {}

    # ---- PHÁT HIỆN XE ----
    detections = coco_model(frame, conf=0.25)[0]
    detections_ = []
    for detection in detections.boxes.data.tolist():
        x1, y1, x2, y2, score, class_id = detection
        if int(class_id) in vehicles:
            detections_.append([x1, y1, x2, y2, score])

    # ---- TRACK XE (SORT) ----
    if len(detections_) > 0:
        track_ids = mot_tracker.update(np.asarray(detections_))
    else:
        track_ids = mot_tracker.update(np.empty((0, 5)))

    # ---- VẼ VÙNG DỪNG XE ----
    cv2.rectangle(frame, (x1_zone, y1_zone), (x2_zone, y2_zone), (0, 0, 255), 2)
    cv2.putText(frame, "STOP LINE ZONE", (x1_zone, y1_zone - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)

    # ---- Duyệt từng xe đang track ----
    for (x1t, y1t, x2t, y2t, track_id) in track_ids:
        car_box = [x1t, y1t, x2t, y2t]

        # --- TÍNH IOU VỚI VÙNG VI PHẠM ---
        iou = compute_iou(car_box, violation_zone)
        if iou > 0.1:
            color = (0, 0, 255)
            label = f"ID {int(track_id)} VIOLATION!"
        else:
            color = (0, 255, 0)
            label = f"ID {int(track_id)}"

        # --- VẼ KHUNG XE ---
        cv2.rectangle(frame, (int(x1t), int(y1t)), (int(x2t), int(y2t)), color, 2)
        cv2.putText(frame, label, (int(x1t), int(y1t) - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    # ---- NHẬN DIỆN BIỂN SỐ ----
    license_plates = license_plate_detector(frame)[0]
    for license_plate in license_plates.boxes.data.tolist():
        x1, y1, x2, y2, score, class_id = license_plate
        xcar1, ycar1, xcar2, ycar2, car_id = get_car(license_plate, track_ids)

        if car_id != -1:
            license_plate_crop = frame[int(y1):int(y2), int(x1): int(x2), :]
            license_plate_crop_gray = cv2.cvtColor(license_plate_crop, cv2.COLOR_BGR2GRAY)
            _, license_plate_crop_thresh = cv2.threshold(license_plate_crop_gray, 64, 255, cv2.THRESH_BINARY_INV)
            license_plate_text, license_plate_text_score = read_license_plate(license_plate_crop_thresh)

            if license_plate_text is not None:
                results[frame_nmr][car_id] = {
                    'car': {'bbox': [xcar1, ycar1, xcar2, ycar2]},
                    'license_plate': {'bbox': [x1, y1, x2, y2],
                                      'text': license_plate_text,
                                      'bbox_score': score,
                                      'text_score': license_plate_text_score}
                }

                # --- VẼ BIỂN SỐ ---
                cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (255, 0, 0), 2)
                cv2.putText(frame, license_plate_text, (int(x1), int(y1) - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)

    # ---- GHI RA VIDEO ----
    frame_display = cv2.resize(frame, (1280, 720))
    cv2.imshow("Traffic Monitoring - Violation Detection", frame_display)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# ================== KẾT THÚC ==================
write_csv(results, './test_violation.csv')
cap.release()
out.release()
cv2.destroyAllWindows()
