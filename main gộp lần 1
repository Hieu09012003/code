import os
import json
import time
import cv2
import numpy as np
import paho.mqtt.client as mqtt
from ultralytics import YOLO
from sort.sort import Sort
from Reader import Reader
from util import write_csv

# ====== C·∫§U H√åNH (ch·ªânh n·∫øu c·∫ßn) ======
ACCESS_TOKEN = "1lZGDfQeEZJ7UqV30cTh"
BROKER = "demo.thingsboard.io"
PORT = 1883

VIDEO_PATH = "./1021.mp4"
OUTPUT_PATH = "./output_violation.mp4"
OUTPUT_CSV = "./results_output.csv"

# YOLO Models
COCO_MODEL_WEIGHT = "yolov8n.pt"
# NOTE: Reader (WPOD) s·∫Ω load WPOD_NET t·ª´ Reader.WPOD_NET_PATH

# C√°c l·ªõp quan t√¢m (COCO IDs)
# 2: car, 3: motorcycle, 5: bus, 7: truck (nh∆∞ file c·ªßa b·∫°n)
VEHICLE_CLASSES = [2, 3, 5, 7]

# V√πng vi ph·∫°m (theo khung video) - ƒëi·ªÅu ch·ªânh ph√π h·ª£p
VIOLATION_ZONE = [100, 1150, 2250, 1820]  # [x1, y1, x2, y2]

# Ng∆∞·ª°ng IoU ƒë·ªÉ xem l√† vi ph·∫°m
IOU_THRESHOLD_VIOLATION = 0.2

# Kho·∫£ng m·ªü r·ªông v√πng crop xe khi g·ª≠i cho Reader (tƒÉng t·ªâ l·ªá ch·ª©a bi·ªÉn)
CROP_EXPAND = 0.1  # m·ªü r·ªông 10% so v·ªõi bbox theo m·ªói chi·ªÅu

# =======================================

# Global flag b·∫≠t/t·∫Øt nh·∫≠n di·ªán khi c√≥ ƒë√®n ƒë·ªè
detecting = False

# MQTT callbacks
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("‚úÖ K·∫øt n·ªëi ThingsBoard th√†nh c√¥ng!")
        client.subscribe("v1/devices/me/attributes")
        client.subscribe("v1/devices/me/rpc/request/+")
    else:
        print("‚ùå K·∫øt n·ªëi MQTT th·∫•t b·∫°i, rc=", rc)

def on_message(client, userdata, msg):
    global detecting
    payload = msg.payload.decode('utf-8')
    print(f"[MQTT] Nh·∫≠n topic: {msg.topic} | Payload: {payload}")
    try:
        data = json.loads(payload)
        if "method" in data and data["method"] == "camera_action":
            color = data["params"].get("traffic_light", "")
            if color == "üî¥":
                detecting = True
                print("üö® ƒê√àN ƒê·ªé: B·∫ÆT ƒê·∫¶U PH√ÅT HI·ªÜN VI PH·∫†M")
            else:
                detecting = False
                print("üü¢/üü°: D·ª™NG NH·∫¨N DI·ªÜN VI PH·∫†M")
    except Exception as e:
        # payload c√≥ th·ªÉ l√† attribute update (kh√¥ng ph·∫£i RPC), in ra cho debug
        print("‚ö†Ô∏è L·ªói x·ª≠ l√Ω MQTT payload:", e)

# H√†m t√≠nh IoU gi·ªØa 2 box [x1,y1,x2,y2]
def calculate_iou(box, zone):
    xA = max(box[0], zone[0])
    yA = max(box[1], zone[1])
    xB = min(box[2], zone[2])
    yB = min(box[3], zone[3])
    interW = max(0, xB - xA)
    interH = max(0, yB - yA)
    interArea = interW * interH
    if interArea == 0:
        return 0.0
    boxArea = (box[2] - box[0]) * (box[3] - box[1])
    zoneArea = (zone[2] - zone[0]) * (zone[3] - zone[1])
    union = boxArea + zoneArea - interArea + 1e-9
    return interArea / union

def expand_bbox(box, expand_ratio, frame_w, frame_h):
    x1, y1, x2, y2 = box
    w = x2 - x1
    h = y2 - y1
    dx = w * expand_ratio
    dy = h * expand_ratio
    ex1 = int(max(0, x1 - dx))
    ey1 = int(max(0, y1 - dy))
    ex2 = int(min(frame_w - 1, x2 + dx))
    ey2 = int(min(frame_h - 1, y2 + dy))
    return [ex1, ey1, ex2, ey2]

def process_video():
    # Load models & utils
    print("üîÅ Kh·ªüi t·∫°o model YOLO + Tracker + Reader (WPOD + SVM)...")
    coco_model = YOLO(COCO_MODEL_WEIGHT)
    mot_tracker = Sort()
    reader = Reader()  # Reader t·ª± load WPOD_NET khi kh·ªüi t·∫°o

    cap = cv2.VideoCapture(VIDEO_PATH)
    if not cap.isOpened():
        print("‚ùå Kh√¥ng th·ªÉ m·ªü video:", VIDEO_PATH)
        return

    fps = int(cap.get(cv2.CAP_PROP_FPS) or 25)
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fourcc = cv2.VideoWriter_fourcc(*"mp4v")
    out = cv2.VideoWriter(OUTPUT_PATH, fourcc, fps, (width, height))
    print(f"üìπ Video: {width}x{height} @ {fps}fps")

    frame_n = 0
    results = {}  # dict[frame_n][car_id] = {...} ƒë·ªÉ write_csv s·ª≠ d·ª•ng
    processed_violation_ids = set()  # tr√°nh ƒë·ªçc bi·ªÉn s·ªë l·∫∑p cho c√πng track_id

    while True:
        ret, frame = cap.read()
        if not ret:
            break
        frame_n += 1
        results[frame_n] = {}

        # YOLO detect
        dets = coco_model(frame, conf=0.3)[0]
        detections_ = []
        for box in dets.boxes.data.tolist():
            x1, y1, x2, y2, score, class_id = box
            if int(class_id) in VEHICLE_CLASSES:
                detections_.append([x1, y1, x2, y2, score])

        # Tracking update
        if len(detections_) > 0:
            track_ids = mot_tracker.update(np.asarray(detections_))
        else:
            track_ids = mot_tracker.update(np.empty((0, 5)))

        # V·∫Ω v√πng vi ph·∫°m
        cv2.rectangle(frame, (VIOLATION_ZONE[0], VIOLATION_ZONE[1]), (VIOLATION_ZONE[2], VIOLATION_ZONE[3]), (0, 0, 255), 3)
        cv2.putText(frame, "Violation Zone", (VIOLATION_ZONE[0], VIOLATION_ZONE[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2)

        # X·ª≠ l√Ω t·ª´ng track
        for track in track_ids:
            x1, y1, x2, y2, track_id = track
            x1i, y1i, x2i, y2i = int(x1), int(y1), int(x2), int(y2)
            car_box = [x1i, y1i, x2i, y2i]
            iou = calculate_iou(car_box, VIOLATION_ZONE)

            # L∆∞u th√¥ng tin c∆° b·∫£n v√†o structure results (d·ª± ph√≤ng)
            if track_id not in results[frame_n]:
                results[frame_n][int(track_id)] = {}
            results[frame_n][int(track_id)]['car'] = {'bbox': [x1i, y1i, x2i, y2i]}

            if detecting and iou > IOU_THRESHOLD_VIOLATION:
                # Xe vi ph·∫°m (m√†u ƒë·ªè)
                cv2.rectangle(frame, (x1i, y1i), (x2i, y2i), (0, 0, 255), 3)
                cv2.putText(frame, f"VIOLATION #{int(track_id)}", (x1i, y1i - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0,0,255), 2)

                # N·∫øu ch∆∞a ƒë·ªçc bi·ªÉn s·ªë cho track n√†y th√¨ ƒë·ªçc
                tid = int(track_id)
                if tid not in processed_violation_ids:
                    # Crop v√πng xe (m·ªü r·ªông m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o ch·ª©a bi·ªÉn)
                    ex1, ey1, ex2, ey2 = expand_bbox(car_box, CROP_EXPAND, width, height)
                    crop = frame[ey1:ey2, ex1:ex2].copy()
                    if crop.size == 0:
                        print(f"‚ö†Ô∏è Crop r·ªóng cho track {tid} frame {frame_n}")
                    else:
                        try:
                            # Reader.read tr·∫£ v·ªÅ LPResult
                            print(f"üîé ƒêang ƒë·ªçc bi·ªÉn cho track {tid} t·∫°i frame {frame_n} ...")
                            lp_res = reader.read(crop, plot=False, fname=f"{frame_n}_{tid}.png")
                            plate_text = lp_res.plate()
                            plate_type = lp_res.type_str()
                            print(f"‚û°Ô∏è K·∫øt qu·∫£ ƒë·ªçc: {plate_text} | Lo·∫°i: {plate_type}")
                        except Exception as e:
                            print("‚ö†Ô∏è L·ªói khi g·ªçi Reader.read:", e)
                            plate_text = None
                            plate_type = None

                        # Ghi v√†o k·∫øt qu·∫£ ƒë·ªÉ write_csv d√πng
                        results[frame_n][tid]['license_plate'] = {
                            'bbox': [ex1, ey1, ex2, ey2, 1.0, 0],  # format gi·∫£ ƒë·ªãnh (x1 y1 x2 y2 score class_id)
                            'bbox_score': 1.0,
                            'text': plate_text if plate_text is not None else "",
                            'text_score': 1.0 if plate_text else 0.0
                        }

                        processed_violation_ids.add(tid)

            else:
                # Xe b√¨nh th∆∞·ªùng (xanh/cyan)
                cv2.rectangle(frame, (x1i, y1i), (x2i, y2i), (255, 255, 0), 2)

        # Hi·ªÉn th·ªã & ghi frame
        cv2.imshow("Traffic Monitoring + OCR", cv2.resize(frame, (1280, 720)))
        out.write(frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Sau khi x·ª≠ l√Ω xong video, ghi file CSV k·∫øt qu·∫£
    try:
        print("üíæ Ghi k·∫øt qu·∫£ ra CSV:", OUTPUT_CSV)
        write_csv(results, OUTPUT_CSV)
        print("‚úÖ Ghi CSV ho√†n t·∫•t.")
    except Exception as e:
        print("‚ö†Ô∏è L·ªói khi ghi CSV:", e)

    cap.release()
    out.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    # Kh·ªüi t·∫°o MQTT client
    client = mqtt.Client()
    client.username_pw_set(ACCESS_TOKEN)
    client.on_connect = on_connect
    client.on_message = on_message
    try:
        client.connect(BROKER, PORT, 60)
    except Exception as e:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MQTT broker:", e)
        # V·∫´n ti·∫øp t·ª•c ch·∫°y ch·∫ø ƒë·ªô local (kh√¥ng c√≥ t√≠n hi·ªáu ƒë√®n)
    client.loop_start()
    try:
        process_video()
    finally:
        client.loop_stop()
        print("‚èπÔ∏è K·∫øt th√∫c ch∆∞∆°ng tr√¨nh.")
